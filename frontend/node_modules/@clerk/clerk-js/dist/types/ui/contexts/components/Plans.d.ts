import type { Appearance, BillingPlanResource, BillingSubscriptionItemResource, BillingSubscriptionPlanPeriod } from '@clerk/types';
import type { LocalizationKey } from '../../localization';
/**
 * Only remove decimal places if they are '00', to match previous behavior.
 */
export declare function normalizeFormatted(formatted: string): string;
export declare const usePaymentMethods: () => {
    data: import("@clerk/types").BillingPaymentMethodResource[];
    count: number;
    error: import("@clerk/shared/apiResponseError-DwKA2zPi").C | null;
    isLoading: boolean;
    isFetching: boolean;
    isError: boolean;
    page: number;
    pageCount: number;
    fetchPage: (size: number | ((_size: number) => number)) => void;
    fetchPrevious: () => void;
    fetchNext: () => void;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    revalidate: () => Promise<void>;
    setData: (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentMethodResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentMethodResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentMethodResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentMethodResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentMethodResource> | undefined>;
};
export declare const usePaymentAttempts: () => {
    data: import("@clerk/types").BillingPaymentResource[];
    count: number;
    error: import("@clerk/shared/apiResponseError-DwKA2zPi").C | null;
    isLoading: boolean;
    isFetching: boolean;
    isError: boolean;
    page: number;
    pageCount: number;
    fetchPage: (size: number | ((_size: number) => number)) => void;
    fetchPrevious: () => void;
    fetchNext: () => void;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    revalidate: () => Promise<void>;
    setData: (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingPaymentResource> | undefined>;
};
export declare const useStatements: (params?: {
    mode: "cache";
}) => {
    data: import("@clerk/types").BillingStatementResource[];
    count: number;
    error: import("@clerk/shared/apiResponseError-DwKA2zPi").C | null;
    isLoading: boolean;
    isFetching: boolean;
    isError: boolean;
    page: number;
    pageCount: number;
    fetchPage: (size: number | ((_size: number) => number)) => void;
    fetchPrevious: () => void;
    fetchNext: () => void;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    revalidate: () => Promise<void>;
    setData: (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingStatementResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingStatementResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingStatementResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingStatementResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").BillingStatementResource> | undefined>;
};
export declare const useSubscription: () => {
    subscriptionItems: BillingSubscriptionItemResource[];
    data: import("@clerk/types").BillingSubscriptionResource | null | undefined;
    error: any;
    isLoading: boolean;
    isFetching: boolean;
    revalidate: () => Promise<import("@clerk/types").BillingSubscriptionResource | null | undefined>;
};
export declare const usePlans: (params?: {
    mode: "cache";
}) => {
    data: BillingPlanResource[];
    count: number;
    error: import("@clerk/shared/apiResponseError-DwKA2zPi").C | null;
    isLoading: boolean;
    isFetching: boolean;
    isError: boolean;
    page: number;
    pageCount: number;
    fetchPage: (size: number | ((_size: number) => number)) => void;
    fetchPrevious: () => void;
    fetchNext: () => void;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    revalidate: () => Promise<void>;
    setData: (data?: import("@clerk/types").ClerkPaginatedResponse<BillingPlanResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<BillingPlanResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<BillingPlanResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<BillingPlanResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<BillingPlanResource> | undefined>;
};
type HandleSelectPlanProps = {
    plan: BillingPlanResource;
    planPeriod: BillingSubscriptionPlanPeriod;
    mode?: 'modal' | 'mounted';
    event?: React.MouseEvent<HTMLElement>;
    appearance?: Appearance;
    newSubscriptionRedirectUrl?: string;
};
export declare const usePlansContext: () => {
    activeOrUpcomingSubscription: (plan: BillingPlanResource) => BillingSubscriptionItemResource | undefined;
    activeAndUpcomingSubscriptions: (plan: BillingPlanResource) => BillingSubscriptionItemResource[];
    activeOrUpcomingSubscriptionBasedOnPlanPeriod: (plan: BillingPlanResource, planPeriod?: BillingSubscriptionPlanPeriod) => BillingSubscriptionItemResource | undefined;
    isDefaultPlanImplicitlyActiveOrUpcoming: boolean;
    handleSelectPlan: ({ plan, planPeriod, mode, event, appearance, newSubscriptionRedirectUrl }: HandleSelectPlanProps) => void;
    openSubscriptionDetails: (event?: React.MouseEvent<HTMLElement>) => void;
    buttonPropsForPlan: ({ plan, subscription: sub, isCompact, selectedPlanPeriod, }: {
        plan?: BillingPlanResource;
        subscription?: BillingSubscriptionItemResource;
        isCompact?: boolean;
        selectedPlanPeriod?: BillingSubscriptionPlanPeriod;
    }) => {
        localizationKey: LocalizationKey;
        variant: "bordered" | "solid";
        colorScheme: "secondary" | "primary";
        isDisabled: boolean;
        disabled: boolean;
    };
    canManageSubscription: ({ plan, subscription: sub }: {
        plan?: BillingPlanResource;
        subscription?: BillingSubscriptionItemResource;
    }) => boolean;
    captionForSubscription: (subscription: BillingSubscriptionItemResource) => LocalizationKey | undefined;
    defaultFreePlan: BillingPlanResource | undefined;
    revalidateAll: () => void;
};
export {};
